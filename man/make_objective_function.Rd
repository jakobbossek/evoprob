% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_objective_function.R
\name{make_objective_function}
\alias{make_objective_function}
\title{Factory for objective functions.}
\usage{
make_objective_function(A, A.pars, runner.fun, repls = 1L,
  aggr.fun = base::mean, named.result = TRUE)
}
\arguments{
\item{A}{[\code{character}]\cr
Character vector of at least two algorithm names.
Note that the names must be valid arguments for the \dQuote{algorithm}
parameter of parameter \code{runner.fun}.}

\item{A.pars}{[\code{list of lists}]\cr
A named list (names equal to \code{A}) where each sub-list should contain
parameters for the respective algorithm.}

\item{runner.fun}{[\code{function(x, algorithm, ...)}]\cr
A function that expects an instance \code{x}, an algorithm name \code{algorithm}
(see parameter \code{A}) and optional further parameters (see parameter
\code{A.pars}).}

\item{repls}{[\code{integer}]\cr
How many independent runs should be conducted for each algorithm on an
instance? Defaults to 1, but should be adjusted if the corresponding algorithm(s)
is/are of stochastic nature.
If a single value is passed it is used for all algorithms.}

\item{aggr.fun}{[\code{function(x, ...)}]\cr
Function used to aggregate results of multiple runs.
Only applied if \code{repls[i]} is greater than one for algorithm \code{A[i]}.
Defaults to \code{\link[base]{mean}}.}

\item{named.result}{[\code{logical(1)}]\cr
Should the result vector be named with \code{A}?
Default is \code{TRUE}.}
}
\value{
[\code{function(x, ...)}] Factorized function (see description).
}
\description{
Given a set of \eqn{n} algorithms \eqn{A} (parameter \code{A}) with
parameters \eqn{\theta_i, i \in A} (parameter \code{A.pars}) the goal is
to produce a function \code{f = function(x, ...)} that expects a problem
instance \code{x} and optional arguments \code{...}. The function shall
run each algorithm \eqn{A_i \in A} parameterized with \eqn{\theta_i} on
\code{x}. In case of stochastic/randomized algorithms each algorithm should
be run multiple times (parameter \code{repls}) returning an aggregated
value (parameter \code{aggr.fun}).
}
